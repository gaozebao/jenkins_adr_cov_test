/*
 * Copyright 2015, The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        //jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        //jcenter()
        mavenCentral()
    }
}



apply plugin: 'java'


configurations{
    emma
}

dependencies {
    emma "emma:emma:2.1.5320"
    emma "emma:emma_ant:2.1.5320"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}

test {
    // add EMMA related JVM args to our tests
    jvmArgs "-XX:-UseSplitVerifier", "-Demma.coverage.out.file=$buildDir/tmp/emma/metadata.emma", "-Demma.coverage.out.merge=true"

    doFirst {
        println "Instrumenting the classes at " + sourceSets.main.output.classesDir.absolutePath
        // define the custom EMMA ant tasks
        ant.taskdef( resource:"emma_ant.properties", classpath: configurations.emma.asPath)

        ant.path(id:"run.classpath") {
            pathelement(location:sourceSets.main.output.classesDir.absolutePath)
        }
        def emmaInstDir = new File(sourceSets.main.output.classesDir.parentFile.parentFile, "tmp/emma/instr")
        emmaInstDir.mkdirs()
        println "Creating $emmaInstDir to instrument from " +       sourceSets.main.output.classesDir.absolutePath
        // instruct our compiled classes and store them at $buildDir/tmp/emma/instr
        ant.emma(enabled: 'true', verbosity:'info'){
            instr(merge:"true", destdir: emmaInstDir.absolutePath, instrpathref:"run.classpath",
                    metadatafile: new File(emmaInstDir, '/metadata.emma').absolutePath) {
                instrpath {
                    fileset(dir:sourceSets.main.output.classesDir.absolutePath, includes:"**/*.class")
                }
            }
        }
        setClasspath(files("$buildDir/tmp/emma/instr") + configurations.emma +    getClasspath())
    }

    // The report should be generated directly after the tests are done.
    // We create three types (txt, html, xml) of reports here. Running your build script now should
    // result in output like that:
    doLast {
        def srcDir = sourceSets.main.java.srcDirs.toArray()[0]
        println "Creating test coverage reports for classes " + srcDir
        def emmaInstDir = new File(sourceSets.main.output.classesDir.parentFile.parentFile, "tmp/emma")
        ant.emma(enabled:"true"){
            new File("$buildDir/reports/emma").mkdirs()
            report(sourcepath: srcDir){
                fileset(dir: emmaInstDir.absolutePath){
                    include(name:"**/*.emma")
                }
                txt(outfile:"$buildDir/reports/emma/coverage.txt")
                html(outfile:"$buildDir/reports/emma/coverage.html")
                xml(outfile:"$buildDir/reports/emma/coverage.xml")
            }
        }
        println "Test coverage reports available at $buildDir/reports/emma."
        println "txt: $buildDir/reports/emma/coverage.txt"
        println "Test $buildDir/reports/emma/coverage.html"
        println "Test $buildDir/reports/emma/coverage.xml"
    }
}

ext {
    buildToolsVersion = "24.0.1"
    junitVersion = "4.12"
    mockitoVersion = "1.10.19"
}
